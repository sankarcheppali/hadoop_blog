/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class movies extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"movies\",\"fields\":[{\"name\":\"movieName\",\"type\":\"string\"},{\"name\":\"year\",\"type\":\"string\"},{\"name\":\"tags\",\"type\":{\"type\":\"array\",\"items\":\"string\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence movieName;
  @Deprecated public java.lang.CharSequence year;
  @Deprecated public java.util.List<java.lang.CharSequence> tags;

  /**
   * Default constructor.
   */
  public movies() {}

  /**
   * All-args constructor.
   */
  public movies(java.lang.CharSequence movieName, java.lang.CharSequence year, java.util.List<java.lang.CharSequence> tags) {
    this.movieName = movieName;
    this.year = year;
    this.tags = tags;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return movieName;
    case 1: return year;
    case 2: return tags;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: movieName = (java.lang.CharSequence)value$; break;
    case 1: year = (java.lang.CharSequence)value$; break;
    case 2: tags = (java.util.List<java.lang.CharSequence>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'movieName' field.
   */
  public java.lang.CharSequence getMovieName() {
    return movieName;
  }

  /**
   * Sets the value of the 'movieName' field.
   * @param value the value to set.
   */
  public void setMovieName(java.lang.CharSequence value) {
    this.movieName = value;
  }

  /**
   * Gets the value of the 'year' field.
   */
  public java.lang.CharSequence getYear() {
    return year;
  }

  /**
   * Sets the value of the 'year' field.
   * @param value the value to set.
   */
  public void setYear(java.lang.CharSequence value) {
    this.year = value;
  }

  /**
   * Gets the value of the 'tags' field.
   */
  public java.util.List<java.lang.CharSequence> getTags() {
    return tags;
  }

  /**
   * Sets the value of the 'tags' field.
   * @param value the value to set.
   */
  public void setTags(java.util.List<java.lang.CharSequence> value) {
    this.tags = value;
  }

  /** Creates a new movies RecordBuilder */
  public static movies.Builder newBuilder() {
    return new movies.Builder();
  }
  
  /** Creates a new movies RecordBuilder by copying an existing Builder */
  public static movies.Builder newBuilder(movies.Builder other) {
    return new movies.Builder(other);
  }
  
  /** Creates a new movies RecordBuilder by copying an existing movies instance */
  public static movies.Builder newBuilder(movies other) {
    return new movies.Builder(other);
  }
  
  /**
   * RecordBuilder for movies instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<movies>
    implements org.apache.avro.data.RecordBuilder<movies> {

    private java.lang.CharSequence movieName;
    private java.lang.CharSequence year;
    private java.util.List<java.lang.CharSequence> tags;

    /** Creates a new Builder */
    private Builder() {
      super(movies.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(movies.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing movies instance */
    private Builder(movies other) {
            super(movies.SCHEMA$);
      if (isValidValue(fields()[0], other.movieName)) {
        this.movieName = data().deepCopy(fields()[0].schema(), other.movieName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.year)) {
        this.year = data().deepCopy(fields()[1].schema(), other.year);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.tags)) {
        this.tags = data().deepCopy(fields()[2].schema(), other.tags);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'movieName' field */
    public java.lang.CharSequence getMovieName() {
      return movieName;
    }
    
    /** Sets the value of the 'movieName' field */
    public movies.Builder setMovieName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.movieName = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'movieName' field has been set */
    public boolean hasMovieName() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'movieName' field */
    public movies.Builder clearMovieName() {
      movieName = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'year' field */
    public java.lang.CharSequence getYear() {
      return year;
    }
    
    /** Sets the value of the 'year' field */
    public movies.Builder setYear(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.year = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'year' field has been set */
    public boolean hasYear() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'year' field */
    public movies.Builder clearYear() {
      year = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'tags' field */
    public java.util.List<java.lang.CharSequence> getTags() {
      return tags;
    }
    
    /** Sets the value of the 'tags' field */
    public movies.Builder setTags(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[2], value);
      this.tags = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'tags' field has been set */
    public boolean hasTags() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'tags' field */
    public movies.Builder clearTags() {
      tags = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public movies build() {
      try {
        movies record = new movies();
        record.movieName = fieldSetFlags()[0] ? this.movieName : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.year = fieldSetFlags()[1] ? this.year : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.tags = fieldSetFlags()[2] ? this.tags : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
